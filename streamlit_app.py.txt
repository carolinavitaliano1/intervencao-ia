# -*- coding: utf-8 -*-
import streamlit as st

# --- BANCO DE DADOS SIMULADO DAS HABILIDADES ---
bncc_database = {
    "1¬∫ Ano - Ensino Fundamental": {
        "L√≠ngua Portuguesa": [
            {"codigo": "EF01LP02", "descricao": "Escrever, espontaneamente ou por ditado, palavras e frases de forma alfab√©tica.", "tags": ["escrita", "alfabetizacao"]},
            {"codigo": "EF01LP05", "descricao": "Reconhecer o sistema de escrita alfab√©tica como representa√ß√£o dos sons da fala.", "tags": ["leitura", "consciencia fonologica"]},
        ],
        "Matem√°tica": [
            {"codigo": "EF01MA01", "descricao": "Utilizar n√∫meros naturais como indicador de quantidade ou de ordem em diferentes situa√ß√µes cotidianas.", "tags": ["numeros", "contagem"]},
            {"codigo": "EF01MA06", "descricao": "Construir fatos b√°sicos da adi√ß√£o e utiliz√°-los em procedimentos de c√°lculo para resolver problemas.", "tags": ["calculo", "soma", "problemas"]},
        ]
    },
    "2¬∫ Ano - Ensino Fundamental": {
        "L√≠ngua Portuguesa": [
            {"codigo": "EF12LP01", "descricao": "Ler palavras novas com precis√£o na decodifica√ß√£o, no caso de palavras de uso frequente, ler globalmente, por memoriza√ß√£o.", "tags": ["leitura", "decodificacao"]},
        ],
        "Matem√°tica": [
             {"codigo": "EF02MA06", "descricao": "Resolver e elaborar problemas de adi√ß√£o e de subtra√ß√£o, envolvendo n√∫meros de at√© tr√™s ordens, com os significados de juntar, acrescentar, separar, retirar.", "tags": ["calculo", "soma", "subtracao", "problemas"]}
        ]
    }
}

# --- FUN√á√ÉO DE L√ìGICA DO APP ---
def sugerir_habilidades_bncc(ano_escolar, disciplina, palavras_chave):
    habilidades_sugeridas = []
    palavras_chave_lista = [palavra.strip().lower() for palavra in palavras_chave.split(',')]
    
    if ano_escolar in bncc_database and disciplina in bncc_database[ano_escolar]:
        for habilidade in bncc_database[ano_escolar][disciplina]:
            if any(tag in palavras_chave_lista for tag in habilidade["tags"]):
                habilidades_sugeridas.append(habilidade)
    return habilidades_sugeridas

# --- INTERFACE GR√ÅFICA DO APLICATIVO ---

st.set_page_config(layout="wide", page_title="INTERVEN√á√ÉO IA")

st.title("üß† INTERVEN√á√ÉO IA")
st.subheader("Seu assistente psicopedag√≥gico para adapta√ß√£o curricular")

st.markdown("---")

# M√ìDULO 1: GERADOR DE PEI (Sugest√µes BNCC)
st.header("M√≥dulo 1: Sugest√£o de Habilidades da BNCC")

col1, col2 = st.columns(2)

with col1:
    ano_selecionado = st.selectbox(
        "1. Selecione o Ano Escolar:",
        options=list(bncc_database.keys())
    )
    
    disciplina_selecionada = st.selectbox(
        "2. Selecione a Disciplina:",
        options=list(bncc_database[ano_selecionado].keys())
    )

with col2:
    palavras_chave_input = st.text_input(
        "3. Digite as dificuldades do aluno (separadas por v√≠rgula):",
        placeholder="Ex: leitura, calculo, escrita"
    )

if st.button("Buscar Habilidades para o PEI"):
    if palavras_chave_input:
        sugestoes = sugerir_habilidades_bncc(ano_selecionado, disciplina_selecionada, palavras_chave_input)
        st.subheader("‚úÖ Habilidades Recomendadas:")
        if sugestoes:
            for habilidade in sugestoes:
                st.success(
                    f"**C√≥digo:** {habilidade['codigo']}\n\n"
                    f"**Descri√ß√£o:** {habilidade['descricao']}"
                )
        else:
            st.warning("Nenhuma habilidade encontrada para os crit√©rios informados.")
    else:
        st.error("Por favor, informe ao menos uma palavra-chave de dificuldade.")

st.markdown("\n\n---")

# M√ìDULO 2: CRIADOR DE ATIVIDADES ADAPTADAS
st.header("M√≥dulo 2: Adaptador R√°pido de Atividades")

st.write("Crie uma atividade e aplique adapta√ß√µes instantaneamente.")

enunciado_original = st.text_input("1. Digite o enunciado da atividade:", "Resolva as opera√ß√µes abaixo.")
questoes_originais = st.text_area(
    "2. Digite as quest√µes (uma por linha):",
    "a) 5 + 3 = ?\nb) 10 - 4 = ?\nc) 7 + 8 = ?\nd) 15 - 6 = ?"
)

st.subheader("3. Selecione as Adapta√ß√µes:")
col_adapt1, col_adapt2, col_adapt3 = st.columns(3)
with col_adapt1:
    simplificar_enunciado = st.checkbox("Simplificar enunciado", help="Adiciona uma frase de incentivo.")
with col_adapt2:
    reduzir_questoes = st.checkbox("Reduzir n¬∫ de quest√µes", help="Mostra apenas as duas primeiras quest√µes.")
with col_adapt3:
    destacar_visual = st.checkbox("Destacar visualmente", help="Usa um bloco de alerta para chamar a aten√ß√£o.")

st.subheader("‚úÖ Atividade Adaptada (Pr√©-visualiza√ß√£o):")

# L√≥gica da adapta√ß√£o
enunciado_adaptado = f"Vamos praticar! {enunciado_original}" if simplificar_enunciado else enunciado_original
questoes_lista = questoes_originais.split('\n')
questoes_adaptadas = questoes_lista[:2] if reduzir_questoes else questoes_lista

# Exibi√ß√£o
if destacar_visual:
    with st.container(border=True):
        st.markdown(f"**{enunciado_adaptado}**")
        for q in questoes_adaptadas:
            st.write(q)
else:
    st.markdown(f"**{enunciado_adaptado}**")
    for q in questoes_adaptadas:
        st.write(q)