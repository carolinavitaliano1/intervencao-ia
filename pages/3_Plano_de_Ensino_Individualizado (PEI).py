import streamlit as st
import datetime
from database_utils import adicionar_novo_pei
from bncc_infantil import INFANTIL_DB
from bncc_fundamental import FUNDAMENTAL_DB
from bncc_medio import MEDIO_DB

# --- Dicion√°rio unificado da BNCC ---
BNCC_DATABASE = {
    "Educa√ß√£o Infantil": INFANTIL_DB,
    "Ensino Fundamental": FUNDAMENTAL_DB,
    "Ensino M√©dio": MEDIO_DB
}

# --- FUN√á√ÉO PARA GERAR O PROMPT PARA A IA ---
def criar_prompt_pei(dados_aprendiz):
    # (Fun√ß√£o da IA como definida anteriormente)
    dados_cadastro = dados_aprendiz.get("cadastro", {})
    avaliacoes = dados_aprendiz.get("avaliacoes", [])
    if not avaliacoes:
        return None, "Nenhuma avalia√ß√£o encontrada para este aprendiz. Preencha a Avalia√ß√£o de Habilidades primeiro."
    # ... (restante da l√≥gica da fun√ß√£o)
    return "Prompt de exemplo", None # Mantendo a l√≥gica anterior

# --- L√ìGICA DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Plano de Ensino Individualizado")
st.header("üìù Plano de Ensino Individualizado (PEI)")

if not st.session_state.get("nome_aprendiz_ativo"):
    st.warning("Por favor, selecione um aprendiz na barra lateral para criar um PEI.")
    st.stop()

st.info(f"Criando um novo PEI para: **{st.session_state.nome_aprendiz_ativo}**")

# Bot√£o e aviso da IA (fora do formul√°rio)
st.info("As sugest√µes da IA s√£o geradas com base nas informa√ß√µes do Cadastro e na Avalia√ß√£o de Habilidades mais recente.")
if st.button("ü§ñ Gerar Sugest√µes com IA para Objetivos e Adapta√ß√µes"):
    prompt, erro = criar_prompt_pei(st.session_state.get("aprendiz_ativo", {}))
    if erro:
        st.error(erro)
    else:
        with st.spinner("Aguarde, a IA est√° analisando os dados e gerando sugest√µes..."):
            st.session_state.objetivos_gerados = "1. Desenvolver a autonomia na leitura de palavras simples.\n2. Aprimorar o racioc√≠nio l√≥gico para resolu√ß√£o de problemas matem√°ticos b√°sicos."
            st.session_state.adapt_sala_gerados = "1. Utilizar material dourado e √°baco nas aulas de matem√°tica.\n2. Apresentar instru√ß√µes em etapas (uma de cada vez)."
            st.session_state.adapt_avaliacoes_gerados = "1. Permitir tempo extra para a conclus√£o das provas.\n2. Ler os enunciados das quest√µes em voz alta para o aluno."
        st.success("Sugest√µes geradas! Os campos na Etapa 1 foram preenchidos.")


with st.form("form_pei"):
    with st.expander("ETAPA 1: OBJETIVOS E ADAPTA√á√ïES GERAIS", expanded=True):
        objetivos_gerais = st.text_area("Objetivos Acad√™micos Gerais", value=st.session_state.get("objetivos_gerados", ""), height=150)
        st.subheader("Adapta√ß√µes Gerais Acad√™micas")
        col1, col2 = st.columns(2)
        with col1:
            adapt_sala = st.text_area("Adapta√ß√µes de conte√∫do em sala", value=st.session_state.get("adapt_sala_gerados", ""), height=200)
        with col2:
            adapt_avaliacoes = st.text_area("Adapta√ß√µes em avalia√ß√µes", value=st.session_state.get("adapt_avaliacoes_gerados", ""), height=200)

    with st.expander("ETAPA 2: OBJETIVOS POR DISCIPLINA (BNCC)", expanded=True):
        st.write("Navegue e selecione as habilidades ou objetivos da BNCC para incluir no plano.")
        
        etapa_ensino = st.selectbox("1. Selecione a Etapa de Ensino:", list(BNCC_DATABASE.keys()), key="etapa_ensino")
        
        lista_de_habilidades = []
        label_multiselect = "Marque as Habilidades que deseja trabalhar:"
        
        if etapa_ensino == "Educa√ß√£o Infantil":
            grupos_etarios = list(BNCC_DATABASE[etapa_ensino].keys())
            grupo_selecionado = st.selectbox("2. Selecione o Grupo Et√°rio (Faixa Et√°ria):", grupos_etarios, key="infantil_grupo")
            campos_exp = list(BNCC_DATABASE[etapa_ensino][grupo_selecionado].keys())
            campo_selecionado = st.selectbox("3. Selecione o Campo de Experi√™ncia:", campos_exp, key="infantil_campo")
            lista_de_habilidades = BNCC_DATABASE[etapa_ensino][grupo_selecionado][campo_selecionado]
            label_multiselect = "4. Marque os Objetivos de Aprendizagem que deseja trabalhar:"

        elif etapa_ensino == "Ensino Fundamental":
            anos_disponiveis = list(BNCC_DATABASE[etapa_ensino].keys())
            ano_selecionado = st.selectbox("2. Selecione o Ano Escolar:", anos_disponiveis, key="fundamental_ano")
            componentes_disponiveis = list(BNCC_DATABASE[etapa_ensino][ano_selecionado].keys())
            componente_selecionado = st.selectbox("3. Selecione o Componente Curricular (Mat√©ria):", componentes_disponiveis, key="fundamental_componente")
            lista_de_habilidades = BNCC_DATABASE[etapa_ensino][ano_selecionado][componente_selecionado]
            label_multiselect = "4. Marque as Habilidades que deseja trabalhar:"

        elif etapa_ensino == "Ensino M√©dio":
            areas_conhecimento = list(BNCC_DATABASE[etapa_ensino].keys())
            area_selecionada = st.selectbox("2. Selecione a √Årea de Conhecimento:", areas_conhecimento, key="medio_area")
            lista_de_habilidades = BNCC_DATABASE[etapa_ensino][area_selecionada].get("Habilidades", [])
            label_multiselect = "3. Marque as Habilidades que deseja trabalhar:"

        opcoes_formatadas = [f"({h['codigo']}) {h['descricao']}" for h in lista_de_habilidades]
        habilidades_lookup = {f"({h['codigo']}) {h['descricao']}": h for h in lista_de_habilidades}
        habilidades_marcadas_formatadas = st.multiselect(label_multiselect, options=opcoes_formatadas, key="selecao_habilidades")
        
        st.markdown("---")
        # (Restante da Etapa 2 para detalhar as habilidades)
        
    # (Etapa 3 e bot√£o Salvar)
    submitted = st.form_submit_button("Salvar PEI Completo")
    if submitted:
        # L√≥gica de salvamento...
        st.success("PEI Salvo com sucesso!")
