import streamlit as st
import datetime
from database_utils import adicionar_novo_pei
from bncc_fundamental import FUNDAMENTAL_DB

# --- FUN√á√ÉO PARA BUSCAR HABILIDADES NA BNCC ---
def buscar_habilidade_bncc(codigo):
    codigo = codigo.upper().strip()
    for ano, componentes in FUNDAMENTAL_DB.items():
        for componente, habilidades in componentes.items():
            for habilidade in habilidades:
                if habilidade["codigo"] == codigo:
                    return f'({habilidade["codigo"]}) {habilidade["descricao"]}'
    return None

# --- FUN√á√ÉO PARA GERAR O PROMPT PARA A IA ---
def criar_prompt_pei(dados_aprendiz):
    # Pega a avalia√ß√£o mais recente
    avaliacoes = dados_aprendiz.get("avaliacoes", [])
    if not avaliacoes:
        return None
    
    ultima_avaliacao = avaliacoes[-1]
    
    # Monta um resumo dos pontos fracos para a IA focar
    resumo_pontos_apoio = []
    for i in range(1, 46):
        habilidade = f"hab{i}"
        resultado = ultima_avaliacao.get(habilidade)
        if resultado in ["Realiza com apoio", "N√£o realiza"]:
            # (Aqui poder√≠amos ter um dicion√°rio para mapear hab1 -> "Descri√ß√£o da habilidade 1")
            resumo_pontos_apoio.append(f"- Habilidade {habilidade}: {resultado}")

    # Adiciona observa√ß√µes acad√™micas se houver
    for materia, obs in ultima_avaliacao.items():
        if "_acad" in materia and obs:
            resumo_pontos_apoio.append(f"- Observa√ß√£o em {materia.replace('_acad', '').capitalize()}: {obs}")

    if not resumo_pontos_apoio:
        return "O aprendiz n√£o apresentou pontos de dificuldade na √∫ltima avalia√ß√£o."

    prompt = f"""
    Voc√™ √© um especialista em psicopedagogia. Com base no seguinte resumo da avalia√ß√£o de um aprendiz, gere sugest√µes para um Plano de Ensino Individualizado (PEI).

    **Principais pontos que necessitam de apoio:**
    {'
'.join(resumo_pontos_apoio)}

    **Sua Tarefa:**
    Gere um texto conciso e pr√°tico para os seguintes tr√™s campos. Use uma linguagem clara e direta.

    1.  **Objetivos Acad√™micos Gerais:** Descreva 2 a 3 objetivos gerais e abrangentes que focam nas principais √°reas de dificuldade do aluno para o pr√≥ximo semestre.
    2.  **Adapta√ß√µes de Conte√∫do em Sala:** Sugira 3 a 4 adapta√ß√µes pr√°ticas e acion√°veis que o professor pode usar em sala de aula (ex: uso de material concreto, instru√ß√µes passo a passo, tempo para processamento, etc.).
    3.  **Adapta√ß√µes em Avalia√ß√µes:** Sugira 3 a 4 adapta√ß√µes espec√≠ficas para provas e avalia√ß√µes (ex: enunciados lidos em voz alta, tempo extra, consulta a materiais de apoio, avalia√ß√µes orais, etc.).
    """
    return prompt

# --- L√ìGICA DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Plano de Ensino Individualizado")
st.header("üìù Plano de Ensino Individualizado (PEI)")

if not st.session_state.get("nome_aprendiz_ativo"):
    st.warning("Por favor, selecione um aprendiz na barra lateral para criar um PEI.")
    st.stop()

st.info(f"Criando um novo PEI para: **{st.session_state.nome_aprendiz_ativo}**")

with st.form("form_pei"):
    
    with st.expander("ETAPA 1: OBJETIVOS E ADAPTA√á√ïES GERAIS", expanded=True):
        
        # O novo bot√£o para gerar sugest√µes com IA
        if st.button("ü§ñ Gerar Sugest√µes com IA"):
            prompt = criar_prompt_pei(st.session_state.get("aprendiz_ativo", {}))
            if prompt:
                # Simula√ß√£o da chamada da IA (neste caso, o pr√≥prio Gemini gera a resposta)
                # Em um sistema real, aqui seria a chamada para a API da IA
                with st.spinner("Aguarde, a IA est√° analisando a avalia√ß√£o e gerando sugest√µes..."):
                    # Aqui voc√™ pode colocar a l√≥gica para chamar a API da IA.
                    # Por enquanto, vamos usar um texto de exemplo:
                    st.session_state.objetivos_gerados = "1. Desenvolver a autonomia na leitura de palavras simples.\n2. Aprimorar o racioc√≠nio l√≥gico para resolu√ß√£o de problemas matem√°ticos b√°sicos."
                    st.session_state.adapt_sala_gerados = "1. Utilizar material dourado e √°baco nas aulas de matem√°tica.\n2. Apresentar instru√ß√µes em etapas (uma de cada vez).\n3. Oferecer textos com letras maiores e espa√ßamento duplo."
                    st.session_state.adapt_avaliacoes_gerados = "1. Permitir tempo extra para a conclus√£o das provas.\n2. Ler os enunciados das quest√µes em voz alta para o aluno.\n3. Permitir o uso de uma tabuada de apoio durante as avalia√ß√µes de matem√°tica."
                st.success("Sugest√µes geradas pela IA!")
            else:
                st.error("N√£o foi encontrada uma avalia√ß√£o com pontos de apoio para este aprendiz. Por favor, preencha a 'Avalia√ß√£o de Habilidades' primeiro.")

        objetivos_gerais = st.text_area("Objetivos Acad√™micos Gerais", value=st.session_state.get("objetivos_gerados", ""), height=150)
        
        st.subheader("Adapta√ß√µes Gerais Acad√™micas")
        col1, col2 = st.columns(2)
        with col1:
            adapt_sala = st.text_area("Adapta√ß√µes de conte√∫do em sala", value=st.session_state.get("adapt_sala_gerados", ""), height=200)
        with col2:
            adapt_avaliacoes = st.text_area("Adapta√ß√µes em avalia√ß√µes", value=st.session_state.get("adapt_avaliacoes_gerados", ""), height=200)

    # ... (Restante do formul√°rio do PEI)

    submitted = st.form_submit_button("Salvar PEI")
    if submitted:
        # L√≥gica para salvar os dados...
        st.success("PEI Salvo com sucesso!")
