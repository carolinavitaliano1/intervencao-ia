import streamlit as st
import datetime
from database_utils import adicionar_novo_pei
from bncc_infantil import INFANTIL_DB
from bncc_fundamental import FUNDAMENTAL_DB
from bncc_medio import MEDIO_DB

# --- Dicion√°rio unificado da BNCC ---
BNCC_DATABASE = {
    "Educa√ß√£o Infantil": INFANTIL_DB,
    "Ensino Fundamental": FUNDAMENTAL_DB,
    "Ensino M√©dio": MEDIO_DB
}

# --- FUN√á√ÉO PARA GERAR O PROMPT PARA A IA ---
def criar_prompt_pei(dados_aprendiz):
    dados_cadastro = dados_aprendiz.get("cadastro", {})
    avaliacoes = dados_aprendiz.get("avaliacoes", [])
    if not avaliacoes:
        return None, "Nenhuma avalia√ß√£o encontrada para este aprendiz. Preencha a Avalia√ß√£o de Habilidades primeiro."
    
    ultima_avaliacao = avaliacoes[-1]
    resumo_completo = ["**Informa√ß√µes do Prontu√°rio do Aprendiz:**"]
    if dados_cadastro.get("diagnostico"): resumo_completo.append(f"- Diagn√≥stico: {dados_cadastro['diagnostico']}")
    if dados_cadastro.get("dificuldades"): resumo_completo.append(f"- Principais Dificuldades (relatadas): {dados_cadastro['dificuldades']}")
    
    resumo_completo.append("\n**Pontos de Apoio da Avalia√ß√£o de Habilidades:**")
    pontos_encontrados = False
    for i in range(1, 46):
        habilidade_cod = f"hab{i}"
        resultado = ultima_avaliacao.get(habilidade_cod)
        if resultado in ["Realiza com apoio", "N√£o realiza"]:
            pontos_encontrados = True
            resumo_completo.append(f"- Habilidade {habilidade_cod}: {resultado}")

    if not pontos_encontrados:
        resumo_completo.append("- Nenhum ponto de dificuldade espec√≠fico marcado na avalia√ß√£o.")
    
    resumo_str = "\n".join(resumo_completo)
    return f"Baseado no perfil de um aprendiz:\n{resumo_str}\nGere sugest√µes para: 1. Objetivos Acad√™micos Gerais. 2. Adapta√ß√µes de Conte√∫do. 3. Adapta√ß√µes em Avalia√ß√µes.", None

# --- L√ìGICA DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Plano de Ensino Individualizado")
st.header("üìù Plano de Ensino Individualizado (PEI)")

if not st.session_state.get("nome_aprendiz_ativo"):
    st.warning("Por favor, selecione um aprendiz na barra lateral para criar um PEI.")
    st.stop()

st.info(f"Criando um novo PEI para: **{st.session_state.nome_aprendiz_ativo}**")

# Bot√£o e aviso da IA (fora do formul√°rio)
st.info("As sugest√µes da IA s√£o geradas com base nas informa√ß√µes do Cadastro e na Avalia√ß√£o de Habilidades mais recente.")
if st.button("ü§ñ Gerar Sugest√µes com IA para Objetivos e Adapta√ß√µes"):
    prompt, erro = criar_prompt_pei(st.session_state.get("aprendiz_ativo", {}))
    if erro:
        st.error(erro)
    else:
        with st.spinner("Aguarde, a IA est√° analisando os dados e gerando sugest√µes..."):
            # Simula√ß√£o da resposta da IA
            st.session_state.objetivos_gerados = "1. Desenvolver a autonomia na leitura de palavras simples.\n2. Aprimorar o racioc√≠nio l√≥gico para resolu√ß√£o de problemas matem√°ticos b√°sicos."
            st.session_state.adapt_sala_gerados = "1. Utilizar material dourado e √°baco nas aulas de matem√°tica.\n2. Apresentar instru√ß√µes em etapas (uma de cada vez).\n3. Oferecer textos com letras maiores e espa√ßamento duplo."
            st.session_state.adapt_avaliacoes_gerados = "1. Permitir tempo extra para a conclus√£o das provas.\n2. Ler os enunciados das quest√µes em voz alta para o aluno."
        st.success("Sugest√µes geradas! Os campos na Etapa 1 foram preenchidos.")

with st.form("form_pei"):
    with st.expander("ETAPA 1: OBJETIVOS E ADAPTA√á√ïES GERAIS", expanded=True):
        objetivos_gerais = st.text_area("Objetivos Acad√™micos Gerais", value=st.session_state.get("objetivos_gerados", ""), height=150)
        st.subheader("Adapta√ß√µes Gerais Acad√™micas")
        col1, col2 = st.columns(2)
        with col1:
            adapt_sala = st.text_area("Adapta√ß√µes de conte√∫do em sala", value=st.session_state.get("adapt_sala_gerados", ""), height=200)
        with col2:
            adapt_avaliacoes = st.text_area("Adapta√ß√µes em avalia√ß√µes", value=st.session_state.get("adapt_avaliacoes_gerados", ""), height=200)

    with st.expander("ETAPA 2: OBJETIVOS POR DISCIPLINA (BNCC)", expanded=True):
        etapa_ensino = st.selectbox("1. Selecione a Etapa de Ensino:", list(BNCC_DATABASE.keys()))
        
        lista_de_habilidades = []
        if etapa_ensino == "Educa√ß√£o Infantil":
            # L√≥gica para Ed. Infantil
            pass
        elif etapa_ensino == "Ensino Fundamental":
            anos_disponiveis = list(BNCC_DATABASE[etapa_ensino].keys())
            ano_selecionado = st.selectbox("2. Selecione o Ano Escolar:", anos_disponiveis)
            componentes_disponiveis = list(BNCC_DATABASE[etapa_ensino][ano_selecionado].keys())
            componente_selecionado = st.selectbox("3. Selecione o Componente Curricular (Mat√©ria):", componentes_disponiveis)
            lista_de_habilidades = BNCC_DATABASE[etapa_ensino][ano_selecionado][componente_selecionado]
        elif etapa_ensino == "Ensino M√©dio":
            # L√≥gica para Ensino M√©dio
            pass

        opcoes_formatadas = [f"({h['codigo']}) {h['descricao']}" for h in lista_de_habilidades]
        habilidades_lookup = {f"({h['codigo']}) {h['descricao']}": h for h in lista_de_habilidades}
        habilidades_marcadas_formatadas = st.multiselect("4. Marque as habilidades que deseja trabalhar:", options=opcoes_formatadas)
        
        habilidades_detalhadas = []
        if habilidades_marcadas_formatadas:
            # ... (l√≥gica para detalhar habilidades)
            pass

    with st.expander("ETAPA 3: OBSERVA√á√ïES E FINALIZA√á√ÉO"):
        observacoes = st.text_area("Observa√ß√µes Gerais", height=200)
        ajustes_proximo_pei = st.text_area("Ajustes para o Pr√≥ximo PEI", height=200)

    submitted = st.form_submit_button("Salvar PEI Completo")
    if submitted:
        # ... (l√≥gica de salvamento)
        st.success("PEI salvo com sucesso!")
