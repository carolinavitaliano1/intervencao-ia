import streamlit as st
import datetime
from database_utils import adicionar_novo_pei
from bncc_fundamental import FUNDAMENTAL_DB

# --- FUN√á√ÉO PARA BUSCAR HABILIDADES NA BNCC ---
def buscar_habilidade_bncc(codigo):
    codigo = codigo.upper().strip()
    for ano, componentes in FUNDAMENTAL_DB.items():
        for componente, habilidades in componentes.items():
            for habilidade in habilidades:
                if habilidade["codigo"] == codigo:
                    return f'({habilidade["codigo"]}) {habilidade["descricao"]}'
    return None

# --- FUN√á√ÉO PARA GERAR O PROMPT PARA A IA (VERS√ÉO MAIS COMPLETA) ---
def criar_prompt_pei(dados_aprendiz):
    # Pega os dados do cadastro
    dados_cadastro = dados_aprendiz.get("cadastro", {})
    
    # Pega a avalia√ß√£o mais recente
    avaliacoes = dados_aprendiz.get("avaliacoes", [])
    if not avaliacoes:
        return None, "Nenhuma avalia√ß√£o encontrada para este aprendiz. Preencha a Avalia√ß√£o de Habilidades primeiro."
    
    ultima_avaliacao = avaliacoes[-1]
    
    # Monta um resumo dos dados do cadastro, incluindo Autonomia e Avalia√ß√£o Geral
    resumo_cadastro = ["**Informa√ß√µes do Prontu√°rio do Aprendiz:**"]
    if dados_cadastro.get("diagnostico"): resumo_cadastro.append(f"- Diagn√≥stico Principal: {dados_cadastro['diagnostico']}")
    if dados_cadastro.get("comorbidades"): resumo_cadastro.append(f"- Comorbidades: {dados_cadastro['comorbidades']}")
    # Se√ß√£o Autonomia
    if dados_cadastro.get("comunicacao_alt"): resumo_cadastro.append(f"- Utiliza comunica√ß√£o alternativa? {dados_cadastro['comunicacao_alt']}")
    if dados_cadastro.get("costuma_crises"): resumo_cadastro.append(f"- Costuma ter crises? {dados_cadastro['costuma_crises']}")
    # Se√ß√£o Avalia√ß√£o Geral
    if dados_cadastro.get("dificuldades"): resumo_cadastro.append(f"- Principais Dificuldades (relatadas): {dados_cadastro['dificuldades']}")
    if dados_cadastro.get("potencialidades"): resumo_cadastro.append(f"- Principais Potencialidades (relatadas): {dados_cadastro['potencialidades']}")
    if dados_cadastro.get("adapt_materiais"): resumo_cadastro.append(f"- Necessita de adapta√ß√£o de materiais? {dados_cadastro['adapt_materiais']}")
    if dados_cadastro.get("adapt_curriculo"): resumo_cadastro.append(f"- Necessita de adapta√ß√£o de curr√≠culo? {dados_cadastro['adapt_curriculo']}")
    
    # Monta um resumo dos pontos fracos da avalia√ß√£o de habilidades
    resumo_pontos_apoio = ["\n**Resumo da Avalia√ß√£o de Habilidades Recente (pontos que necessitam de apoio):**"]
    pontos_encontrados = False
    for i in range(1, 46):
        habilidade_cod = f"hab{i}"
        resultado = ultima_avaliacao.get(habilidade_cod)
        if resultado in ["Realiza com apoio", "N√£o realiza"]:
            pontos_encontrados = True
            resumo_pontos_apoio.append(f"- Habilidade '{habilidade_cod}': {resultado}")

    if not pontos_encontrados:
        resumo_pontos_apoio.append("- Nenhum ponto de dificuldade marcado na avalia√ß√£o de habilidades.")

    # Junta os dois resumos
    resumo_cadastro_str = "\n".join(resumo_cadastro)
    resumo_avaliacao_str = "\n".join(resumo_pontos_apoio)

    prompt = f"""
    Voc√™ √© um especialista em psicopedagogia. Com base nas seguintes informa√ß√µes de um aprendiz, gere sugest√µes para um Plano de Ensino Individualizado (PEI).

    {resumo_cadastro_str}

    {resumo_avaliacao_str}

    **Sua Tarefa:**
    Considerando TODAS as informa√ß√µes acima (diagn√≥stico, autonomia, dificuldades, potencialidades e avalia√ß√£o de habilidades), gere um texto conciso e pr√°tico para os tr√™s campos a seguir.

    1.  **Objetivos Acad√™micos Gerais:**
    2.  **Adapta√ß√µes de Conte√∫do em Sala:**
    3.  **Adapta√ß√µes em Avalia√ß√µes:**
    """
    return prompt, None

# --- L√ìGICA DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Plano de Ensino Individualizado")
st.header("üìù Plano de Ensino Individualizado (PEI)")

if not st.session_state.get("nome_aprendiz_ativo"):
    st.warning("Por favor, selecione um aprendiz na barra lateral para criar um PEI.")
    st.stop()

st.info(f"Criando um novo PEI para: **{st.session_state.nome_aprendiz_ativo}**")

peis_anteriores = st.session_state.get("aprendiz_ativo", {}).get("peis", [])
dados_base = peis_anteriores[-1] if peis_anteriores else {}

st.info("As sugest√µes da IA s√£o geradas com base nas informa√ß√µes do **Cadastro do Aprendiz** (incluindo Autonomia e Avalia√ß√£o Geral) e na **avalia√ß√£o de habilidades mais recente**.")

if st.button("ü§ñ Gerar Sugest√µes com IA"):
    prompt, erro = criar_prompt_pei(st.session_state.get("aprendiz_ativo", {}))
    if erro:
        st.error(erro)
    else:
        with st.spinner("Aguarde, a IA est√° analisando os dados e gerando sugest√µes..."):
            # Simula√ß√£o da resposta da IA
            st.session_state.objetivos_gerados = "1. Desenvolver a autonomia na leitura de palavras simples e na escrita do pr√≥prio nome.\n2. Aprimorar o racioc√≠nio l√≥gico para resolu√ß√£o de problemas matem√°ticos de adi√ß√£o e subtra√ß√£o com suporte visual.\n3. Ampliar a participa√ß√£o e intera√ß√£o em atividades de grupo."
            st.session_state.adapt_sala_gerados = "1. Utilizar letras m√≥veis e jogos sil√°bicos para a constru√ß√£o de palavras.\n2. Oferecer material dourado ou √°baco para a resolu√ß√£o de opera√ß√µes matem√°ticas.\n3. Apresentar instru√ß√µes de forma clara, em etapas curtas (uma de cada vez), com apoio visual.\n4. Criar um 'cantinho da calma' na sala para momentos de desregula√ß√£o sensorial."
            st.session_state.adapt_avaliacoes_gerados = "1. Permitir tempo extra para a conclus√£o das provas.\n2. Ler os enunciados das quest√µes em voz alta para o aluno.\n3. Permitir o uso de uma tabuada de apoio ou calculadora durante as avalia√ß√µes de matem√°tica.\n4. Adaptar quest√µes de m√∫ltipla escolha para respostas diretas ou com menor n√∫mero de alternativas."
        st.success("Sugest√µes geradas pela IA! Os campos abaixo foram preenchidos.")

with st.form("form_pei"):
    with st.expander("ETAPA 1: OBJETIVOS E ADAPTA√á√ïES GERAIS", expanded=True):
        objetivos_gerais = st.text_area("Objetivos Acad√™micos Gerais", value=st.session_state.get("objetivos_gerados", dados_base.get("objetivos_gerais", "")), height=150)
        st.subheader("Adapta√ß√µes Gerais Acad√™micas")
        col1, col2 = st.columns(2)
        with col1:
            adapt_sala = st.text_area("Adapta√ß√µes de conte√∫do em sala", value=st.session_state.get("adapt_sala_gerados", dados_base.get("adapt_sala", "")), height=200)
        with col2:
            adapt_avaliacoes = st.text_area("Adapta√ß√µes em avalia√ß√µes", value=st.session_state.get("adapt_avaliacoes_gerados", dados_base.get("adapt_avaliacoes", "")), height=200)

    # ... (Restante do formul√°rio como antes)
    
    submitted = st.form_submit_button("Salvar PEI")
    if submitted:
        # ... (L√≥gica de salvamento como antes)
        st.success("PEI salvo com sucesso!")
