import streamlit as st
import datetime
from database_utils import adicionar_plano_adaptacoes

# --- FUN√á√ÉO PARA GERAR O PROMPT PARA A IA ---
def criar_prompt_ia(dados_aprendiz):
    dados_cadastro = dados_aprendiz.get("cadastro", {})
    avaliacoes = dados_aprendiz.get("avaliacoes", [])
    if not avaliacoes:
        return None, "Nenhuma avalia√ß√£o encontrada para este aprendiz. Preencha a Avalia√ß√£o de Habilidades primeiro."
    
    ultima_avaliacao = avaliacoes[-1]
    resumo_completo = ["**Informa√ß√µes do Prontu√°rio do Aprendiz:**"]
    if dados_cadastro.get("diagnostico"): resumo_completo.append(f"- Diagn√≥stico: {dados_cadastro['diagnostico']}")
    if dados_cadastro.get("dificuldades"): resumo_completo.append(f"- Principais Dificuldades (relatadas): {dados_cadastro['dificuldades']}")
    
    resumo_completo.append("\n**Pontos de Apoio da Avalia√ß√£o de Habilidades:**")
    pontos_encontrados = False
    for i in range(1, 46):
        habilidade_cod = f"hab{i}"
        resultado = ultima_avaliacao.get(habilidade_cod)
        if resultado in ["Realiza com apoio", "N√£o realiza"]:
            pontos_encontrados = True
            resumo_completo.append(f"- Habilidade {habilidade_cod}: {resultado}")

    if not pontos_encontrados:
        resumo_completo.append("- Nenhum ponto de dificuldade espec√≠fico marcado na avalia√ß√£o.")
    
    resumo_str = "\n".join(resumo_completo)
    return f"Baseado no perfil de um aprendiz:\n{resumo_str}\nGere sugest√µes para: 1. Objetivos Acad√™micos Gerais. 2. Adapta√ß√µes de Conte√∫do. 3. Adapta√ß√µes em Avalia√ß√µes.", None

# --- L√ìGICA DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Adapta√ß√µes Gerais")
st.header("Plano de Adapta√ß√µes Gerais")

if not st.session_state.get("nome_aprendiz_ativo"):
    st.warning("Por favor, selecione um aprendiz na barra lateral.")
    st.stop()

st.info(f"Criando plano de adapta√ß√µes para: **{st.session_state.nome_aprendiz_ativo}**")

if st.button("ü§ñ Gerar Sugest√µes com IA"):
    prompt, erro = criar_prompt_ia(st.session_state.get("aprendiz_ativo", {}))
    if erro:
        st.error(erro)
    else:
        with st.spinner("Aguarde, a IA est√° analisando os dados..."):
            st.session_state.objetivos_gerados = "1. Exemplo de objetivo gerado pela IA."
            st.session_state.adapt_sala_gerados = "1. Exemplo de adapta√ß√£o em sala gerado pela IA."
            st.session_state.adapt_avaliacoes_gerados = "1. Exemplo de adapta√ß√£o em avalia√ß√£o gerado pela IA."
        st.success("Sugest√µes geradas!")

with st.form("form_adaptacoes"):
    objetivos_gerais = st.text_area("Objetivos Acad√™micos Gerais", value=st.session_state.get("objetivos_gerados", ""), height=150)
    st.subheader("Adapta√ß√µes Gerais Acad√™micas")
    col1, col2 = st.columns(2)
    with col1:
        adapt_sala = st.text_area("Adapta√ß√µes de conte√∫do em sala", value=st.session_state.get("adapt_sala_gerados", ""), height=200)
    with col2:
        adapt_avaliacoes = st.text_area("Adapta√ß√µes em avalia√ß√µes", value=st.session_state.get("adapt_avaliacoes_gerados", ""), height=200)

    submitted = st.form_submit_button("Salvar Adapta√ß√µes")
    if submitted:
        data_atual = datetime.datetime.now().strftime("%d/%m/%Y √†s %H:%M:%S")
        novo_plano = {
            "data_criacao": data_atual,
            "objetivos_gerais": objetivos_gerais,
            "adapt_sala": adapt_sala,
            "adapt_avaliacoes": adapt_avaliacoes,
        }
        adicionar_plano_adaptacoes(st.session_state.nome_aprendiz_ativo, novo_plano)
        
        if 'objetivos_gerados' in st.session_state: del st.session_state.objetivos_gerados
        if 'adapt_sala_gerados' in st.session_state: del st.session_state.adapt_sala_gerados
        if 'adapt_avaliacoes_gerados' in st.session_state: del st.session_state.adapt_avaliacoes_gerados
        
        st.success(f"Plano de Adapta√ß√µes para '{st.session_state.nome_aprendiz_ativo}' salvo com sucesso!")
        st.balloons()
