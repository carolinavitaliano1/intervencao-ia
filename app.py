# app.py
import streamlit as st

# --- IMPORTA√á√ÉO DOS DADOS MODULARIZADOS ---
from bncc_infantil import INFANTIL_DB
from bncc_fundamental import FUNDAMENTAL_DB
from bncc_medio import MEDIO_DB

# --- MONTAGEM DO BANCO DE DADOS PRINCIPAL ---
BNCC_DATABASE = {
    "Educa√ß√£o Infantil": INFANTIL_DB,
    "Ensino Fundamental": FUNDAMENTAL_DB,
    "Ensino M√©dio": MEDIO_DB
}

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    layout="wide",
    page_title="INTERVEN√á√ÉO IA Final",
    page_icon="üß†"
)

# --- BANCOS DE DADOS ADICIONAIS ---
estrategias_por_funcao = {
    "Aten√ß√£o Sustentada": ["Dividir tarefas longas em blocos menores com pausas programadas (T√©cnica Pomodoro).", "Usar timers visuais para marcar a dura√ß√£o da tarefa.", "Reduzir est√≠mulos distratores no ambiente.", "Utilizar o 'sussurrofone' para a crian√ßa ouvir a pr√≥pria voz durante a leitura."],
    "Mem√≥ria de Trabalho (Operacional)": ["Fornecer instru√ß√µes em etapas, uma de cada vez.", "Ensinar o uso de checklists e organizadores gr√°ficos.", "Praticar jogos de memoriza√ß√£o.", "Permitir o uso de tabuadas de apoio ou calculadora para focar no racioc√≠nio."],
    "Controle Inibit√≥rio": ["Utilizar sinais de 'Pare e Pense' antes de responder.", "Praticar jogos que exigem espera e troca de turno.", "Estabelecer rotinas claras e previs√≠veis.", "Antecipar mudan√ßas na rotina."],
    "Flexibilidade Cognitiva": ["Jogos que exigem mudan√ßa de regras.", "Apresentar o mesmo problema com diferentes formas de resolu√ß√£o.", "Criar hist√≥rias com finais alternativos.", "Incentivar o 'brainstorming' de ideias."],
    "Processamento Fonol√≥gico": ["Atividades l√∫dicas com rimas, alitera√ß√µes e segmenta√ß√£o de s√≠labas/fonemas.", "Utilizar o m√©todo f√¥nico multissensorial.", "Jogos de 'bingo de sons'.", "Uso de softwares focados em consci√™ncia fonol√≥gica."],
    "Processamento Visoespacial": ["Utilizar papel quadriculado para alinhar n√∫meros e letras.", "Montagem de quebra--cabe√ßas e LEGO seguindo modelos.", "Jogos de labirinto e 'encontre os 7 erros'.", "Destacar linhas ou usar r√©guas de leitura."]
}


# --- MENU LATERAL DE NAVEGA√á√ÉO ---
with st.sidebar:
    st.title("üß† INTERVEN√á√ÉO IA")
    st.caption("Vers√£o Final e Organizada")
    # --- MODIFICA√á√ÉO: "Anamnese Aprofundada" foi trocada por "Cadastro do Aluno" ---
    pagina_selecionada = st.radio(
        "Navegue pelos M√≥dulos:",
        ["P√°gina Inicial", "Cadastro do Aluno", "Plano de Ensino Individualizado (PEI)", "Gerador de Atividades Adaptadas"],
        captions=["Vis√£o geral", "Insira os dados do aluno", "Crie metas e estrat√©gias", "Adapte materiais pedag√≥gicos"]
    )
    st.sidebar.markdown("---")
    st.info("Uma ferramenta especialista para uma educa√ß√£o inclusiva e baseada em evid√™ncias.")


# --- L√ìGICA DAS P√ÅGINAS ---

if pagina_selecionada == "P√°gina Inicial":
    st.title("Bem-vinda √† Vers√£o Final da INTERVEN√á√ÉO IA!")
    st.subheader("Plataforma est√°vel, com c√≥digo modular e busca aprimorada.")
    st.markdown("---")
    st.success("Tudo pronto! Revertemos para a estrutura organizada com arquivos separados e aprimoramos a busca de habilidades para resultados precisos.", icon="üöÄ")
    st.markdown("""
        **Navegue pelo menu √† esquerda para acessar as ferramentas:**
        - **Cadastro do Aluno:** Um guia estruturado para coletar informa√ß√µes cruciais.
        - **PEI com Intelig√™ncia Cl√≠nica:** Navegue pela BNCC completa e use a busca aprimorada por palavras-chave.
        - **Gerador de Atividades Adaptadas:** Crie materiais acess√≠veis com base nos princ√≠pios do DUA.
    """)

# --- MODIFICA√á√ÉO: O conte√∫do da p√°gina foi substitu√≠do pelo formul√°rio de cadastro ---
elif pagina_selecionada == "Cadastro do Aluno":
    st.header("üë§ Cadastro do Aluno")
    st.info("Preencha as informa√ß√µes abaixo para iniciar o planejamento.")

    with st.container(border=True):
        st.subheader("Dados de Identifica√ß√£o")
        col1, col2 = st.columns(2)
        with col1:
            st.text_input("Nome do aluno:")
            st.text_input("Principal respons√°vel:")
            st.text_input("Nome da escola:")
        with col2:
            st.date_input("Data de Nascimento:")
            st.text_input("Grau de parentesco do respons√°vel:")
            [cite_start]st.text_input("Ano escolar:", value="5¬∫") # Valor padr√£o baseado no documento [cite: 4]
    
    with st.container(border=True):
        st.subheader("Desenvolvimento e Sa√∫de")
        col1, col2 = st.columns(2)
        with col1:
            st.text_input("Diagn√≥stico(s) / Transtorno(s):")
        with col2:
            st.text_input("Comorbidades:")
        st.text_area("Terapias realizadas:")

    with st.container(border=True):
        st.subheader("An√°lise Pedag√≥gica")
        col1, col2 = st.columns(2)
        with col1:
            st.text_area("Principais Dificuldades (restri√ß√µes):", height=200)
        with col2:
            st.text_area("Principais Potencialidades (pontos fortes / o que gosta):", height=200)


elif pagina_selecionada == "Plano de Ensino Individualizado (PEI)":
    st.header("üìù Plano de Ensino Individualizado (PEI)")
    st.info("Utilize a base de dados completa da BNCC para fundamentar seu planejamento.")
    
    tab1, tab2 = st.tabs(["üéØ **Navegador da BNCC**", "üí° **Banco de Estrat√©gias Cl√≠nicas**"])

    with tab1:
        etapa_ensino = st.selectbox(
            "1. Selecione a Etapa de Ensino:",
            options=list(BNCC_DATABASE.keys())
        )

        lista_geral = []
        competencias = []

        if etapa_ensino == "Educa√ß√£o Infantil":
            grupo_etario = st.selectbox("2. Selecione o Grupo Et√°rio:", options=list(BNCC_DATABASE["Educa√ß√£o Infantil"].keys()))
            campo_exp = st.selectbox("3. Selecione o Campo de Experi√™ncia:", options=list(BNCC_DATABASE["Educa√ß√£o Infantil"][grupo_etario].keys()))
            keywords_input = st.text_input("4. Filtrar por palavras-chave:", placeholder="Ex: corpo (use v√≠rgula para mais de uma)")
            
            if st.button("Buscar Objetivos de Aprendizagem"):
                lista_geral = BNCC_DATABASE["Educa√ß√£o Infantil"][grupo_etario][campo_exp]

        elif etapa_ensino == "Ensino Fundamental":
            ano_escolar = st.selectbox("2. Selecione o Ano Escolar:", options=list(BNCC_DATABASE["Ensino Fundamental"].keys()))
            componente = st.selectbox("3. Selecione o Componente Curricular:", options=list(BNCC_DATABASE["Ensino Fundamental"][ano_escolar].keys()))
            keywords_input = st.text_input("4. Filtrar por palavras-chave:", placeholder="Ex: leitura (use v√≠rgula para mais de uma)")

            if st.button("Buscar Habilidades"):
                lista_geral = BNCC_DATABASE["Ensino Fundamental"][ano_escolar][componente]
        
        elif etapa_ensino == "Ensino M√©dio":
            st.selectbox("2. Selecione o Ano (para refer√™ncia):", ["1¬∫ Ano", "2¬∫ Ano", "3¬∫ Ano"])
            area_conhecimento = st.selectbox("3. Selecione a √Årea de Conhecimento:", options=list(BNCC_DATABASE["Ensino M√©dio"].keys()))
            keywords_input = st.text_input("4. Filtrar por palavras-chave:", placeholder="Ex: discursos (use v√≠rgula para mais de uma)")

            if st.button("Buscar Compet√™ncias e Habilidades"):
                lista_geral = BNCC_DATABASE["Ensino M√©dio"][area_conhecimento].get("Habilidades", [])
                competencias = BNCC_DATABASE["Ensino M√©dio"][area_conhecimento].get("Compet√™ncias Espec√≠ficas", [])
                
                st.subheader(f"‚úÖ Compet√™ncias Espec√≠ficas de {area_conhecimento}")
                with st.container(border=True):
                    for comp in competencias:
                        st.markdown(f"**Compet√™ncia {comp['codigo']}:** {comp['descricao']}")

        # --- L√ìGICA DE FILTRAGEM E EXIBI√á√ÉO (CORRIGIDA) ---
        if lista_geral:
            st.markdown("---")
            st.subheader("‚úÖ Resultados:")
            
            resultados_filtrados = []
            
            if keywords_input.strip():
                keywords = [key.strip().lower() for key in keywords_input.split(',')]
                for item in lista_geral:
                    descricao = item['descricao'].lower()
                    if all(key in descricao for key in keywords):
                        resultados_filtrados.append(item)
            else:
                resultados_filtrados = lista_geral

            if not resultados_filtrados:
                st.warning("Nenhum item encontrado com os crit√©rios da sua busca.")
            else:
                st.write(f"**Exibindo {len(resultados_filtrados)} resultado(s):**")
                for item in resultados_filtrados:
                    st.success(f"**C√≥digo:** {item['codigo']}\n\n**Descri√ß√£o:** {item['descricao']}")

    with tab2:
        st.subheader("Sugest√£o de Estrat√©gias por Fun√ß√£o Cognitiva")
        funcao_selecionada = st.selectbox("Selecione a fun√ß√£o cognitiva a ser estimulada:", options=list(estrategias_por_funcao.keys()))
        st.markdown(f"#### Estrat√©gias para **{funcao_selecionada}**:")
        with st.container(border=True):
            for estrategia in estrategias_por_funcao[funcao_selecionada]:
                st.markdown(f"- {estrategia}")

elif pagina_selecionada == "Gerador de Atividades Adaptadas":
    st.header("üé® Gerador de Atividades Adaptadas (Avan√ßado)")
    # ... (c√≥digo mantido, pode ser desenvolvido futuramente)
