# app.py
import streamlit as st
import datetime
import json
import os

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    layout="wide",
    page_title="INTERVEN√á√ÉO IA",
    page_icon="üß†"
)

# --- FUN√á√ïES DE BANCO DE DADOS (JSON) ---

# Define o caminho do arquivo do banco de dados
DB_PATH = 'pacientes.json'

# Fun√ß√£o para carregar os pacientes do arquivo JSON
def carregar_dados():
    if not os.path.exists(DB_PATH):
        return {}  # Retorna um dicion√°rio vazio se o arquivo n√£o existir
    with open(DB_PATH, 'r', encoding='utf-8') as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {} # Retorna dicion√°rio vazio se o arquivo estiver vazio ou corrompido

# Fun√ß√£o para salvar um novo paciente no arquivo JSON
def salvar_paciente(dados_paciente):
    pacientes = carregar_dados()
    nome_aluno = dados_paciente.get("nome_aluno")
    if nome_aluno:
        pacientes[nome_aluno] = dados_paciente
        with open(DB_PATH, 'w', encoding='utf-8') as f:
            json.dump(pacientes, f, ensure_ascii=False, indent=4)
        return True
    return False

# --- IMPORTA√á√ÉO DOS DADOS DA BNCC ---
from bncc_infantil import INFANTIL_DB
from bncc_fundamental import FUNDAMENTAL_DB
from bncc_medio import MEDIO_DB

# --- BANCO DE DADOS PRINCIPAL ---
BNCC_DATABASE = {
    "Educa√ß√£o Infantil": INFANTIL_DB,
    "Ensino Fundamental": FUNDAMENTAL_DB,
    "Ensino M√©dio": MEDIO_DB
}

# --- BANCOS DE DADOS ADICIONAIS ---
estrategias_por_funcao = {
    "Aten√ß√£o Sustentada": ["Dividir tarefas longas em blocos menores com pausas programadas (T√©cnica Pomodoro).", "Usar timers visuais para marcar a dura√ß√£o da tarefa.", "Reduzir est√≠mulos distratores no ambiente.", "Utilizar o 'sussurrofone' para a crian√ßa ouvir a pr√≥pria voz durante a leitura."],
    "Mem√≥ria de Trabalho (Operacional)": ["Fornecer instru√ß√µes em etapas, uma de cada vez.", "Ensinar o uso de checklists e organizadores gr√°ficos.", "Praticar jogos de memoriza√ß√£o.", "Permitir o uso de tabuadas de apoio ou calculadora para focar no racioc√≠nio."],
    "Controle Inibit√≥rio": ["Utilizar sinais de 'Pare e Pense' antes de responder.", "Praticar jogos que exigem espera e troca de turno.", "Estabelecer rotinas claras e previs√≠veis.", "Antecipar mudan√ßas na rotina."],
    "Flexibilidade Cognitiva": ["Jogos que exigem mudan√ßa de regras.", "Apresentar o mesmo problema com diferentes formas de resolu√ß√£o.", "Criar hist√≥rias com finais alternativos.", "Incentivar o 'brainstorming' de ideias."],
    "Processamento Fonol√≥gico": ["Atividades l√∫dicas com rimas, alitera√ß√µes e segmenta√ß√£o de s√≠labas/fonemas.", "Utilizar o m√©todo f√¥nico multissensorial.", "Jogos de 'bingo de sons'.", "Uso de softwares focados em consci√™ncia fonol√≥gica."],
    "Processamento Visoespacial": ["Utilizar papel quadriculado para alinhar n√∫meros e letras.", "Montagem de quebra-cabe√ßas e LEGO seguindo modelos.", "Jogos de labirinto e 'encontre os 7 erros'.", "Destacar linhas ou usar r√©guas de leitura."]
}

# --- MENU LATERAL DE NAVEGA√á√ÉO ---
with st.sidebar:
    st.title("üß† INTERVEN√á√ÉO IA")
    
    pacientes_cadastrados = carregar_dados()
    lista_nomes_pacientes = ["Novo Cadastro"] + list(pacientes_cadastrados.keys())
    
    st.session_state.paciente_selecionado = st.selectbox(
        "Selecione o Paciente:",
        options=lista_nomes_pacientes
    )
    
    st.markdown("---")

    # MODIFICA√á√ÉO: Renomeado "Anamnese Aprofundada" para "Cadastro de Paciente"
    pagina_selecionada = st.radio(
        "Navegue pelos M√≥dulos:",
        ["P√°gina Inicial", "Cadastro de Paciente", "Plano de Ensino Individualizado (PEI)", "Gerador de Atividades Adaptadas"],
        captions=["Vis√£o geral", "Cadastre ou edite um paciente", "Crie metas e estrat√©gias", "Adapte materiais pedag√≥gicos"]
    )
    st.sidebar.markdown("---")
    st.info("Uma ferramenta especialista para uma educa√ß√£o inclusiva e baseada em evid√™ncias.")


# --- L√ìGICA DAS P√ÅGINAS ---

if pagina_selecionada == "P√°gina Inicial":
    st.title("Bem-vinda √† Vers√£o Final da INTERVEN√á√ÉO IA!")
    st.subheader("Plataforma est√°vel, com banco de dados de pacientes e busca aprimorada.")
    st.markdown("---")
    st.success("Agora voc√™ pode cadastrar e salvar as informa√ß√µes dos seus pacientes!", icon="üöÄ")
    st.markdown("""
        **Navegue pelo menu √† esquerda para acessar as ferramentas:**
        - **Cadastro de Paciente:** Adicione um novo paciente ou consulte as informa√ß√µes de um j√° existente.
        - **Plano de Ensino Individualizado (PEI):** Selecione um paciente e crie um PEI com base na BNCC.
        - **Gerador de Atividades Adaptadas:** Crie materiais acess√≠veis para o paciente selecionado.
    """)
    st.warning("Para come√ßar, selecione 'Novo Cadastro' na caixa de sele√ß√£o de pacientes e v√° para a aba 'Cadastro de Paciente'.")


elif pagina_selecionada == "Cadastro de Paciente":
    # MODIFICA√á√ÉO: Renomeado o cabe√ßalho
    st.header("üë§ Cadastro de Paciente")

    # Carrega os dados do paciente selecionado, se houver um
    dados_atuais = {}
    if st.session_state.paciente_selecionado != "Novo Cadastro":
        dados_atuais = pacientes_cadastrados.get(st.session_state.paciente_selecionado, {})
        st.info(f"Visualizando dados de: **{st.session_state.paciente_selecionado}**")
    else:
        st.info("Preencha os campos abaixo para realizar um novo cadastro.")

    with st.form("form_paciente", clear_on_submit=False):
        # --- SE√á√ÉO DADOS DO ESTUDANTE ---
        with st.expander("DADOS DO ESTUDANTE", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                nome_aluno = st.text_input("Nome do aluno:", value=dados_atuais.get("nome_aluno", ""))
                principal_responsavel = st.text_input("Principal respons√°vel:", value=dados_atuais.get("principal_responsavel", ""))
                nome_escola = st.text_input("Nome da escola:", value=dados_atuais.get("nome_escola", ""))
                data_pei = st.date_input("Data da elabora√ß√£o do PEI:", value=datetime.datetime.strptime(dados_atuais.get("data_pei", "2024-01-01"), "%Y-%m-%d").date())
                tipo_documento = st.text_input("Tipo de documento:", value=dados_atuais.get("tipo_documento", ""))
            with col2:
                data_nascimento_str = dados_atuais.get("data_nascimento", "2010-01-01")
                data_nascimento = st.date_input("Data de Nascimento:", value=datetime.datetime.strptime(data_nascimento_str, "%Y-%m-%d").date())
                parentesco = st.text_input("Grau de parentesco do respons√°vel:", value=dados_atuais.get("parentesco", ""))
                ano_escolar = st.text_input("Ano escolar:", value=dados_atuais.get("ano_escolar", "5¬∫"))
                duracao_pei = st.text_input("Dura√ß√£o do PEI:", value=dados_atuais.get("duracao_pei", ""))
                elaborado_por = st.text_input("Elaborado por:", value=dados_atuais.get("elaborado_por", ""))

            avali_habilidades = st.text_area("Avalia√ß√£o das habilidades:", value=dados_atuais.get("avali_habilidades", ""))
            relatorio_multi = st.text_area("Relat√≥rio da equipe multidisciplinar:", value=dados_atuais.get("relatorio_multi", ""))

        # Adicione aqui as outras se√ß√µes (DESENVOLVIMENTO E SA√öDE, ESCOLA E EQUIPE, etc.) da mesma forma
        # ...

        # Bot√£o para salvar
        submitted = st.form_submit_button("Salvar Cadastro")
        if submitted:
            if not nome_aluno:
                st.error("O nome do aluno √© obrigat√≥rio para salvar!")
            else:
                dados_paciente = {
                    "nome_aluno": nome_aluno,
                    "principal_responsavel": principal_responsavel,
                    "nome_escola": nome_escola,
                    "data_pei": data_pei.strftime("%Y-%m-%d"),
                    "tipo_documento": tipo_documento,
                    "data_nascimento": data_nascimento.strftime("%Y-%m-%d"),
                    "parentesco": parentesco,
                    "ano_escolar": ano_escolar,
                    "duracao_pei": duracao_pei,
                    "elaborado_por": elaborado_por,
                    "avali_habilidades": avali_habilidades,
                    "relatorio_multi": relatorio_multi,
                    # Adicione aqui os outros campos para salvar
                }
                if salvar_paciente(dados_paciente):
                    st.success(f"Paciente '{nome_aluno}' salvo com sucesso! Atualize a p√°gina ou selecione-o na lista para ver os dados.")
                    st.balloons()
                else:
                    st.error("Ocorreu um erro ao salvar o paciente.")


elif pagina_selecionada == "Plano de Ensino Individualizado (PEI)":
    st.header("üìù Plano de Ensino Individualizado (PEI)")
    
    # Verifica se um paciente foi selecionado
    if st.session_state.paciente_selecionado == "Novo Cadastro":
        st.warning("Por favor, selecione um paciente na barra lateral para criar um PEI.")
    else:
        st.success(f"Criando PEI para o paciente: **{st.session_state.paciente_selecionado}**")
        st.info("Utilize a base de dados completa da BNCC para fundamentar seu planejamento.")

        tab1, tab2 = st.tabs(["üéØ **Navegador da BNCC**", "üí° **Banco de Estrat√©gias Cl√≠nicas**"])

        with tab1:
            etapa_ensino = st.selectbox("1. Selecione a Etapa de Ensino:", options=list(BNCC_DATABASE.keys()))
            # (O restante do seu c√≥digo para a aba BNCC continua aqui...)
            # ...
        with tab2:
            st.subheader("Sugest√£o de Estrat√©gias por Fun√ß√£o Cognitiva")
            # (O restante do seu c√≥digo para a aba de Estrat√©gias continua aqui...)
            # ...


elif pagina_selecionada == "Gerador de Atividades Adaptadas":
    st.header("üé® Gerador de Atividades Adaptadas (Avan√ßado)")

    # Verifica se um paciente foi selecionado
    if st.session_state.paciente_selecionado == "Novo Cadastro":
        st.warning("Por favor, selecione um paciente na barra lateral para gerar atividades.")
    else:
        st.success(f"Gerando atividades para o paciente: **{st.session_state.paciente_selecionado}**")
        # (O restante do seu c√≥digo para o Gerador de Atividades continua aqui...)
        # ...
